{"version":3,"file":"gpu-injected.js","sources":["../../src/scripts/gpu-injected.js"],"sourcesContent":["(function() {\n  if (typeof GPU === 'undefined') {\n    return;\n  }\n\n  console.log('webgpu-dev-extension running');\n\n  /*\n  class WrappedWorker extends Worker {\n    constructor(...args) {\n      console.log('worker:', ...args);\n      super(...args);\n    }\n  }\n\n  window.Worker = WrappedWorker;\n  */\n\n/*\n Worker.prototype.constructor = (function(origFn) {\n  return function(...args) {\n    console.log('worker:', ...args);\n    debugger;\n    return origFn.call(this, ...args);\n  }\n })(Worker.prototype.constructor);\n */\n\n  /*\n  const oldClass = Worker;\n  const oldProto = Worker.prototype;\n  Worker = function(...args) {\n    console.log('worker-------:', ...args);\n    return new oldClass(...args); \n  };\n  Worker.prototype = oldProto;\n  Worker.prototype.constructor = Worker;\n\n  new WebGPURecorder({\n      \"frames\": 25,\n      \"export\": \"WebGPURecording\",\n      \"width\": 300,\n      \"height\": 150\n  });\n\n  function wrapFn(className, fnName, fn) {\n    const origFn = className.prototype[fnName];\n    className.prototype[fnName] = fn(origFn);\n  }\n\n  wrapFn(GPU, 'requestAdapter', function(origFn) {\n    return async function(...args) {\n      const adapter = await origFn.call(this, ...args);\n      console.log('got adapter:', adapter);\n      return adapter;\n    };\n  });\n  */\n\n})();\n"],"names":[],"mappings":";;;EAAA,CAAC,WAAW;EACZ,EAAE,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;EAClC,IAAI;EACJ;;EAEA,EAAE,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC;;EAE7C;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,CAAC,GAAG;;;;;;"}